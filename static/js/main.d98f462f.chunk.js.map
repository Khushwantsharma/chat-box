{"version":3,"sources":["socket.js","App.js","reportWebVitals.js","index.js"],"names":["Socket","io","autoConnect","App","lastmessageref","useRef","useState","list","setList","name","index","isSet","Activeuser","setActiveuser","au","setau","username","setUsername","users","setUsers","useEffect","soc","onAny","event","args","console","log","on","data","length","prevState","k","slice","forEach","dat","push","message","online","onClick","activeusersetter","bind","className","i","key","from","y","p","mes","ismine","propState","current","scrollIntoView","smooth","meslist","map","last","ref","onSubmit","e","preventDefault","target","value","emit","type","id","required","classes","auth","connect","for","onChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d98f462f.chunk.js","sourcesContent":["import { io } from 'socket.io-client';\n  const Socket= io('http://localhost:3001',{\n      autoConnect:false\n  });\nexport default Socket;","import { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport UserList from './UserList';\nimport soc from './socket';\n\nconst App=()=>{\n  const lastmessageref=useRef();\n  const [list,setList]=useState([]);\n  const [Activeuser,setActiveuser]=useState({name:\"\",index:-1,isSet:false});\n  const [au,setau]=useState(\"\");\n  const [username,setUsername]=useState({name:\"\",isSet:false});\n  //syntax[name:,message:[],online:]\n  //syntax message:{mes:mes,ismine:true}\n  const [users,setUsers]=useState([]);\n  useEffect(()=>{\n    soc.onAny((event, ...args) => {\n      console.log(event, args);\n    });\n    soc.on('users',(data)=>{\n      if(data.length==0){\n      }else{\n        setUsers((prevState)=>{\n          let k=prevState.slice();\n          data.forEach(dat => {\n            k.push({name:dat.name,message:[],online:dat.online})\n          });\n          console.log(k);\n          return k;\n        });\n        setList(prevState=>{\n          let k=prevState.slice();\n              data.forEach(dat => {\n                  k.push(<div key={dat.name} onClick={activeusersetter.bind(this,dat.name)} className={dat.online?\"username--active\":\"username\"}>{dat.name}</div>);\n              });\n          return k;\n      })\n      }\n    });\n\n    soc.on('new-user',dat=>{\n      setUsers((prevState)=>{\n        let k;\n        console.log(\"prevstate:\",prevState);\n        if(!prevState){\n          // console.log(\"PrevStatE:\",prevState);\n          k=[]\n        }\n        else{k=prevState.slice();}\n        k.push({name:dat.name,message:[],online:dat.online});\n        return k;\n      });\n      setList(prevState=>{\n        let k=prevState.slice();\n            k.push(<div key={dat.name} onClick={activeusersetter.bind(this,dat.name)} className={dat.online?\"username--active\":\"username\"}>{dat.name}</div>);\n        return k;\n    });\n    });\n\n    //for online /offline\n    soc.on('offline',(dat)=>{\n      setList(prevState=>{\n        let k=prevState.slice();\n        for(let i=0;i<k.length;i++){\n          if(k[i].key==dat){\n            k[i]=(<div key={dat} onClick={activeusersetter.bind(this,dat)} className=\"username\">{dat}</div>)\n            console.log(k[i]);\n          }\n        }\n        return k;\n      })\n    })\n\n    //for online\n    soc.on('online',(dat)=>{\n      setList(prevState=>{\n        let k=prevState.slice();\n        for(let i=0;i<k.length;i++){\n          if(k[i].key==dat){\n            k[i]=(<div key={dat} onClick={activeusersetter.bind(this,dat)} className=\"username--active\">{dat}</div>)\n            console.log(k[i]);\n          }\n        }\n        return k;\n      })\n    })\n\n    //recevice user message.\n    soc.on('private-message',(dat,from)=>{\n      setUsers(prevState=>{\n        let k=prevState.slice();\n        let i;\n        for(let y=0;y<k.length;y++){\n          if(from==k[y].name){\n            i=y;\n          }\n        }\n        let p=k[i].message;\n        p.push({mes:dat,ismine:false});\n        k[i].message=p;\n        return k;\n      });\n    });\n\n    // soc.on(\"connect_error\",(err)=>{\n    //   console.log(\"err:\",err);\n    //   if(err===\"already exist\"){\n    //     setUsername({name:\"\",isSet:false});\n    //     alert(\"already exist\");\n    //   }\n    //   else{\n    //     alert(\"something wrong:\",err);\n    //   }\n    // })\n  }\n  ,[]);\n  useEffect(()=>{\n    if(au!=\"\"){\n      setActiveuser(propState=>{\n        let k={...propState};\n        \n        if(users){\n        k.name=au;\n        k.isSet=true;\n        for(let i=0;i<users.length;i++){\n          if(au==users[i].name){\n            k.index=i;\n            break;\n          }\n        }}\n        return k;\n      })\n    }\n  },[au]);\n  useEffect(()=>{\n    if(lastmessageref.current){\n      lastmessageref.current.scrollIntoView({smooth:true});\n    }\n  },[lastmessageref.current]);\n//  make connecntion with server.\n  const userNameDone=(e)=>{\n    console.log(\"[userNameDone]: Called\");\n    e.preventDefault(); \n    setUsername({name:username.name,isSet:true});\n    soc.auth = {'username': username.name };\n    soc.connect();\n  }\n  //taking user input on for username\n\n  const userNameSetter=(e)=>{\n    setUsername({name:e.target.value,isSet:false});\n  }\n\n  //active user setter .\n  const activeusersetter=(dat)=>{\n    console.log(\"[Activeusersetter]\",dat);\n    setau(dat);  \n  }\n  const mesSend=(e)=>{\n    e.preventDefault();\n    let mes=e.target.mes.value;\n    console.log(mes);\n    soc.emit('private-message',mes,Activeuser.name);\n    setUsers(prevState=>{\n      let k=prevState.slice();\n      let p=k[Activeuser.index].message.slice();\n      p.push({mes:mes,ismine:true});\n      k[Activeuser.index].message=p;\n      return k;\n    })\n  }\n\n  if(!username.isSet){\n    return (\n      <div className=\"Username--main\">\n        <form className=\"Username--form\" onSubmit={userNameDone}>\n          <label for=\"em\" >UserName(Email):</label>\n          <input className=\"text--area\" type=\"email\" id=\"em\" onChange={userNameSetter} name=\"mes\" required />\n          <button classes=\"button--height text--bold\">Enter</button>\n        </form>\n      </div>\n    );\n  }\n  let meslist;\n  if(Activeuser.isSet&&users){\n     meslist=users[Activeuser.index].message.map((dat,index)=>{\n      let last= (index==(users[Activeuser.index].message.length-1))\n      return(\n        <div ref={last?lastmessageref:null} className={dat.ismine?\"Message--main\": \"Message--oth\"}>\n                  <div className=\"Message--main--content\">\n                      {dat.mes}</div>\n                  <div className=\"Message--main--time\">12:00 pm</div>\n            </div>\n      )\n    })\n  }\n  return (\n    <div className=\"App\">\n      <div className=\"title\">\n        Chat-System\n      </div>\n      <div className=\"Main--box\">\n        <div className=\"Main--box--users\">\n          <div className=\"title\">Users</div>\n          {/* {list?<UserList user={users}/>:<div>not found</div>} */}\n          {list}\n        </div>\n        <div className=\"Main--box--chat\">\n          <div className=\"title\">\n            Chat Messages {Activeuser.isSet?Activeuser.name:null}\n          </div>\n          <div className=\"Main--box--chat--messagearea\">\n          {Activeuser.isSet?meslist:\n          <div  className=\"Message--main \">\n            <div className=\"Message--main--content\">\n                      START TALKING</div>\n                  <div className=\"Message--main--time\">12:00 am</div>\n            </div>}\n\n             {/* <div  className=\"Message--main Message--oth\">\n                   <div className=\"Message--main--content\">\n                       Talking</div>\n                   <div className=\"Message--main--time\">12:00 pm</div>\n            </div> */}\n          </div>\n          {Activeuser.isSet?\n          <div className=\"c\">\n          <form className=\"cb--bind\" onSubmit={mesSend}>\n                          <input className=\"text--area\" type=\"text\" id=\"mes\" name=\"mes\" required/>\n                          <button classes=\"button--height text--bold\">Enter</button>\n          </form>\n          </div>\n          :null}\n          \n\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}